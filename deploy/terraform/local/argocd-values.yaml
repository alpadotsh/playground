server:
  # Enable Ingress for ArgoCD server
  ingress:
    enabled: true
    ingressClassName: nginx
    hostname: argocd.127-0-0-1.sslip.io
    # Set the hostname for the Ingress (use localhost or a custom name for local testing)
    # Annotations for the Ingress (customize based on your ingress controller requirements)
    annotations:
      kubernetes.io/ingress.class: "nginx" # Ensure this matches your local ingress setup
    # No TLS configuration needed; it will run without HTTPS
  
  # Disable TLS on the ArgoCD server itself
  extraArgs:
    - --insecure
  # Set service port to HTTP
  service:
    type: NodePort
    port: 80

# Configure Redis, Dex, and other components if needed
redis:
  enabled: true

dex:
  enabled: false

controller:
  enabled: true

repoServer:
  enabled: true
  
configs:
  cm:
    create: true
    annotations: { }
    application.instanceLabelKey: argocd.argoproj.io/instance
    server.rbac.log.enforce.enable: false
    exec.enabled: false
    admin.enabled: true
    timeout.reconciliation: 180s
    timeout.hard.reconciliation: 0s
    statusbadge.enabled: false
    resource.customizations: |
      argoproj.io/Application:
        health.lua: |
          hs = {}
          hs.status = "Progressing"
          hs.message = "Progressing..."
          if obj.status ~= nil then
            if obj.status.operationState ~= nil and obj.status.operationState.phase == "Running" then
              hs.status = "Progressing"
              hs.message = obj.status.operationState.message
            elseif obj.status.health ~= nil then
              hs.status = obj.status.health.status
              if obj.status.health.message ~= nil then
                hs.message = obj.status.health.message
              end
            end
          end
          return hs
